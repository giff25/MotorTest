
build/debug/MotorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012f8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080014bc  080014bc  000024bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080014d4  080014d4  000024d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080014dc  080014dc  000024dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080014e0  080014e0  000024e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080014e4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000068  2000000c  080014f0  0000300c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000074  080014f0  00003074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 10 .comment      00000039  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009d83  00000000  00000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000017c6  00000000  00000000  0000cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 00004fea  00000000  00000000  0000e5be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000135a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058b  00000000  00000000  00013c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000804b  00000000  00000000  000141fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00002c30  00000000  00000000  0001c246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00000f98  00000000  00000000  0001ee78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000014b  00000000  00000000  0001fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b80c 	b.w	80001f4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f001 f800 	bl	80011e8 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_idiv0>:
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080014a4 	.word	0x080014a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080014a4 	.word	0x080014a4

08000238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000238:	b530      	push	{r4, r5, lr}
 800023a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023c:	2400      	movs	r4, #0
 800023e:	9405      	str	r4, [sp, #20]
 8000240:	9406      	str	r4, [sp, #24]
 8000242:	9407      	str	r4, [sp, #28]
 8000244:	9408      	str	r4, [sp, #32]
 8000246:	9409      	str	r4, [sp, #36]	@ 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000248:	9401      	str	r4, [sp, #4]
 800024a:	4b22      	ldr	r3, [pc, #136]	@ (80002d4 <MX_GPIO_Init+0x9c>)
 800024c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800024e:	f042 0204 	orr.w	r2, r2, #4
 8000252:	631a      	str	r2, [r3, #48]	@ 0x30
 8000254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000256:	f002 0204 	and.w	r2, r2, #4
 800025a:	9201      	str	r2, [sp, #4]
 800025c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800025e:	9402      	str	r4, [sp, #8]
 8000260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000266:	631a      	str	r2, [r3, #48]	@ 0x30
 8000268:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800026a:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800026e:	9202      	str	r2, [sp, #8]
 8000270:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000272:	9403      	str	r4, [sp, #12]
 8000274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000276:	f042 0201 	orr.w	r2, r2, #1
 800027a:	631a      	str	r2, [r3, #48]	@ 0x30
 800027c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800027e:	f002 0201 	and.w	r2, r2, #1
 8000282:	9203      	str	r2, [sp, #12]
 8000284:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000286:	9404      	str	r4, [sp, #16]
 8000288:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800028a:	f042 0202 	orr.w	r2, r2, #2
 800028e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000292:	f003 0302 	and.w	r3, r3, #2
 8000296:	9304      	str	r3, [sp, #16]
 8000298:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800029a:	4d0f      	ldr	r5, [pc, #60]	@ (80002d8 <MX_GPIO_Init+0xa0>)
 800029c:	4622      	mov	r2, r4
 800029e:	2120      	movs	r1, #32
 80002a0:	4628      	mov	r0, r5
 80002a2:	f000 fa5e 	bl	8000762 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002aa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80002b0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002b4:	a905      	add	r1, sp, #20
 80002b6:	4809      	ldr	r0, [pc, #36]	@ (80002dc <MX_GPIO_Init+0xa4>)
 80002b8:	f000 f95c 	bl	8000574 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002bc:	2320      	movs	r3, #32
 80002be:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002c8:	a905      	add	r1, sp, #20
 80002ca:	4628      	mov	r0, r5
 80002cc:	f000 f952 	bl	8000574 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d0:	b00b      	add	sp, #44	@ 0x2c
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020800 	.word	0x40020800

080002e0 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <Error_Handler+0x2>

080002e4 <MX_USART2_UART_Init>:
{
 80002e4:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80002e6:	480a      	ldr	r0, [pc, #40]	@ (8000310 <MX_USART2_UART_Init+0x2c>)
 80002e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000314 <MX_USART2_UART_Init+0x30>)
 80002ea:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80002ec:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80002f0:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	2300      	movs	r3, #0
 80002f4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002f8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002fa:	220c      	movs	r2, #12
 80002fc:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000302:	f000 fed5 	bl	80010b0 <HAL_UART_Init>
 8000306:	b900      	cbnz	r0, 800030a <MX_USART2_UART_Init+0x26>
}
 8000308:	bd08      	pop	{r3, pc}
    Error_Handler();
 800030a:	f7ff ffe9 	bl	80002e0 <Error_Handler>
 800030e:	bf00      	nop
 8000310:	20000028 	.word	0x20000028
 8000314:	40004400 	.word	0x40004400

08000318 <SystemClock_Config>:
{
 8000318:	b500      	push	{lr}
 800031a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031c:	2234      	movs	r2, #52	@ 0x34
 800031e:	2100      	movs	r1, #0
 8000320:	a807      	add	r0, sp, #28
 8000322:	f000 ff34 	bl	800118e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000326:	2300      	movs	r3, #0
 8000328:	9302      	str	r3, [sp, #8]
 800032a:	9303      	str	r3, [sp, #12]
 800032c:	9304      	str	r3, [sp, #16]
 800032e:	9305      	str	r3, [sp, #20]
 8000330:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	4a1f      	ldr	r2, [pc, #124]	@ (80003b4 <SystemClock_Config+0x9c>)
 8000336:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8000338:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800033c:	6411      	str	r1, [r2, #64]	@ 0x40
 800033e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000340:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 8000344:	9200      	str	r2, [sp, #0]
 8000346:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000348:	9301      	str	r3, [sp, #4]
 800034a:	491b      	ldr	r1, [pc, #108]	@ (80003b8 <SystemClock_Config+0xa0>)
 800034c:	680a      	ldr	r2, [r1, #0]
 800034e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8000352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000356:	600a      	str	r2, [r1, #0]
 8000358:	680a      	ldr	r2, [r1, #0]
 800035a:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800035e:	9201      	str	r2, [sp, #4]
 8000360:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000362:	2202      	movs	r2, #2
 8000364:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000366:	2101      	movs	r1, #1
 8000368:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036a:	2110      	movs	r1, #16
 800036c:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800036e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000370:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000372:	910f      	str	r1, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000374:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000378:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800037a:	2304      	movs	r3, #4
 800037c:	9311      	str	r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800037e:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000380:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	a807      	add	r0, sp, #28
 8000384:	f000 fbea 	bl	8000b5c <HAL_RCC_OscConfig>
 8000388:	b980      	cbnz	r0, 80003ac <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2102      	movs	r1, #2
 8000390:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000396:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800039a:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039e:	a802      	add	r0, sp, #8
 80003a0:	f000 fa3e 	bl	8000820 <HAL_RCC_ClockConfig>
 80003a4:	b920      	cbnz	r0, 80003b0 <SystemClock_Config+0x98>
}
 80003a6:	b015      	add	sp, #84	@ 0x54
 80003a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80003ac:	f7ff ff98 	bl	80002e0 <Error_Handler>
    Error_Handler();
 80003b0:	f7ff ff96 	bl	80002e0 <Error_Handler>
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40007000 	.word	0x40007000

080003bc <main>:
{
 80003bc:	b508      	push	{r3, lr}
  HAL_Init();
 80003be:	f000 f843 	bl	8000448 <HAL_Init>
  SystemClock_Config();
 80003c2:	f7ff ffa9 	bl	8000318 <SystemClock_Config>
  MX_GPIO_Init();
 80003c6:	f7ff ff37 	bl	8000238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ca:	f7ff ff8b 	bl	80002e4 <MX_USART2_UART_Init>
 80003ce:	e004      	b.n	80003da <main+0x1e>
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80003d0:	2201      	movs	r2, #1
 80003d2:	2120      	movs	r1, #32
 80003d4:	4807      	ldr	r0, [pc, #28]	@ (80003f4 <main+0x38>)
 80003d6:	f000 f9c4 	bl	8000762 <HAL_GPIO_WritePin>
    button_state = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80003da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003de:	4806      	ldr	r0, [pc, #24]	@ (80003f8 <main+0x3c>)
 80003e0:	f000 f9b8 	bl	8000754 <HAL_GPIO_ReadPin>
    if(button_state == 0){
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d0f3      	beq.n	80003d0 <main+0x14>
      HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2120      	movs	r1, #32
 80003ec:	4801      	ldr	r0, [pc, #4]	@ (80003f4 <main+0x38>)
 80003ee:	f000 f9b8 	bl	8000762 <HAL_GPIO_WritePin>
 80003f2:	e7f2      	b.n	80003da <main+0x1e>
 80003f4:	40020000 	.word	0x40020000
 80003f8:	40020800 	.word	0x40020800

080003fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003fc:	b510      	push	{r4, lr}
 80003fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000400:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <HAL_InitTick+0x40>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000408:	fbb3 f3f2 	udiv	r3, r3, r2
 800040c:	4a0c      	ldr	r2, [pc, #48]	@ (8000440 <HAL_InitTick+0x44>)
 800040e:	6810      	ldr	r0, [r2, #0]
 8000410:	fbb0 f0f3 	udiv	r0, r0, r3
 8000414:	f000 f89a 	bl	800054c <HAL_SYSTICK_Config>
 8000418:	b968      	cbnz	r0, 8000436 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800041a:	2c0f      	cmp	r4, #15
 800041c:	d901      	bls.n	8000422 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800041e:	2001      	movs	r0, #1
 8000420:	e00a      	b.n	8000438 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000422:	2200      	movs	r2, #0
 8000424:	4621      	mov	r1, r4
 8000426:	f04f 30ff 	mov.w	r0, #4294967295
 800042a:	f000 f87f 	bl	800052c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <HAL_InitTick+0x48>)
 8000430:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000432:	2000      	movs	r0, #0
 8000434:	e000      	b.n	8000438 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000436:	2001      	movs	r0, #1
}
 8000438:	bd10      	pop	{r4, pc}
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	20000008 	.word	0x20000008
 8000444:	20000004 	.word	0x20000004

08000448 <HAL_Init>:
{
 8000448:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800044a:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <HAL_Init+0x30>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000452:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800045a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000462:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000464:	2003      	movs	r0, #3
 8000466:	f000 f84f 	bl	8000508 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800046a:	2000      	movs	r0, #0
 800046c:	f7ff ffc6 	bl	80003fc <HAL_InitTick>
  HAL_MspInit();
 8000470:	f000 f97e 	bl	8000770 <HAL_MspInit>
}
 8000474:	2000      	movs	r0, #0
 8000476:	bd08      	pop	{r3, pc}
 8000478:	40023c00 	.word	0x40023c00

0800047c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800047c:	4a03      	ldr	r2, [pc, #12]	@ (800048c <HAL_IncTick+0x10>)
 800047e:	6811      	ldr	r1, [r2, #0]
 8000480:	4b03      	ldr	r3, [pc, #12]	@ (8000490 <HAL_IncTick+0x14>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	440b      	add	r3, r1
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000070 	.word	0x20000070
 8000490:	20000000 	.word	0x20000000

08000494 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000494:	4b01      	ldr	r3, [pc, #4]	@ (800049c <HAL_GetTick+0x8>)
 8000496:	6818      	ldr	r0, [r3, #0]
}
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	20000070 	.word	0x20000070

080004a0 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80004a0:	2800      	cmp	r0, #0
 80004a2:	db08      	blt.n	80004b6 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a4:	0109      	lsls	r1, r1, #4
 80004a6:	b2c9      	uxtb	r1, r1
 80004a8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80004ac:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80004b0:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 80004b4:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b6:	f000 000f 	and.w	r0, r0, #15
 80004ba:	0109      	lsls	r1, r1, #4
 80004bc:	b2c9      	uxtb	r1, r1
 80004be:	4b01      	ldr	r3, [pc, #4]	@ (80004c4 <__NVIC_SetPriority+0x24>)
 80004c0:	5419      	strb	r1, [r3, r0]
  }
}
 80004c2:	4770      	bx	lr
 80004c4:	e000ed14 	.word	0xe000ed14

080004c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004c8:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004ca:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ce:	f1c0 0c07 	rsb	ip, r0, #7
 80004d2:	f1bc 0f04 	cmp.w	ip, #4
 80004d6:	bf28      	it	cs
 80004d8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004dc:	1d03      	adds	r3, r0, #4
 80004de:	2b06      	cmp	r3, #6
 80004e0:	d90f      	bls.n	8000502 <NVIC_EncodePriority+0x3a>
 80004e2:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004e4:	f04f 3eff 	mov.w	lr, #4294967295
 80004e8:	fa0e f00c 	lsl.w	r0, lr, ip
 80004ec:	ea21 0100 	bic.w	r1, r1, r0
 80004f0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004f2:	fa0e fe03 	lsl.w	lr, lr, r3
 80004f6:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 80004fa:	ea41 0002 	orr.w	r0, r1, r2
 80004fe:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000502:	2300      	movs	r3, #0
 8000504:	e7ee      	b.n	80004e4 <NVIC_EncodePriority+0x1c>
	...

08000508 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000508:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800050a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800050c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000510:	041b      	lsls	r3, r3, #16
 8000512:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000514:	0200      	lsls	r0, r0, #8
 8000516:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800051a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800051c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000524:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000526:	4770      	bx	lr
 8000528:	e000ed00 	.word	0xe000ed00

0800052c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800052c:	b510      	push	{r4, lr}
 800052e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000530:	4b05      	ldr	r3, [pc, #20]	@ (8000548 <HAL_NVIC_SetPriority+0x1c>)
 8000532:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000534:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000538:	f7ff ffc6 	bl	80004c8 <NVIC_EncodePriority>
 800053c:	4601      	mov	r1, r0
 800053e:	4620      	mov	r0, r4
 8000540:	f7ff ffae 	bl	80004a0 <__NVIC_SetPriority>
}
 8000544:	bd10      	pop	{r4, pc}
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	3801      	subs	r0, #1
 800054e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000552:	d20b      	bcs.n	800056c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8000558:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800055a:	4a05      	ldr	r2, [pc, #20]	@ (8000570 <HAL_SYSTICK_Config+0x24>)
 800055c:	21f0      	movs	r1, #240	@ 0xf0
 800055e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000562:	2000      	movs	r0, #0
 8000564:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	2207      	movs	r2, #7
 8000568:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800056c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800056e:	4770      	bx	lr
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000574:	2300      	movs	r3, #0
 8000576:	2b0f      	cmp	r3, #15
 8000578:	f200 80e3 	bhi.w	8000742 <HAL_GPIO_Init+0x1ce>
{
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	e065      	b.n	800064e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000582:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000584:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000588:	2403      	movs	r4, #3
 800058a:	fa04 f40e 	lsl.w	r4, r4, lr
 800058e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000592:	68cc      	ldr	r4, [r1, #12]
 8000594:	fa04 f40e 	lsl.w	r4, r4, lr
 8000598:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800059a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800059c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800059e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005a2:	684a      	ldr	r2, [r1, #4]
 80005a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80005a8:	409a      	lsls	r2, r3
 80005aa:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005ac:	6042      	str	r2, [r0, #4]
 80005ae:	e05c      	b.n	800066a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80005b0:	08dc      	lsrs	r4, r3, #3
 80005b2:	3408      	adds	r4, #8
 80005b4:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80005b8:	f003 0507 	and.w	r5, r3, #7
 80005bc:	00ad      	lsls	r5, r5, #2
 80005be:	f04f 0e0f 	mov.w	lr, #15
 80005c2:	fa0e fe05 	lsl.w	lr, lr, r5
 80005c6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80005ca:	690a      	ldr	r2, [r1, #16]
 80005cc:	40aa      	lsls	r2, r5
 80005ce:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80005d2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80005d6:	e05c      	b.n	8000692 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005d8:	2206      	movs	r2, #6
 80005da:	e000      	b.n	80005de <HAL_GPIO_Init+0x6a>
 80005dc:	2200      	movs	r2, #0
 80005de:	fa02 f20e 	lsl.w	r2, r2, lr
 80005e2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005e4:	3402      	adds	r4, #2
 80005e6:	4d57      	ldr	r5, [pc, #348]	@ (8000744 <HAL_GPIO_Init+0x1d0>)
 80005e8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005ec:	4a56      	ldr	r2, [pc, #344]	@ (8000748 <HAL_GPIO_Init+0x1d4>)
 80005ee:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80005f0:	ea6f 020c 	mvn.w	r2, ip
 80005f4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80005f8:	684e      	ldr	r6, [r1, #4]
 80005fa:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 80005fe:	d001      	beq.n	8000604 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000600:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000604:	4c50      	ldr	r4, [pc, #320]	@ (8000748 <HAL_GPIO_Init+0x1d4>)
 8000606:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000608:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 800060a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800060e:	684e      	ldr	r6, [r1, #4]
 8000610:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 8000614:	d001      	beq.n	800061a <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000616:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 800061a:	4c4b      	ldr	r4, [pc, #300]	@ (8000748 <HAL_GPIO_Init+0x1d4>)
 800061c:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 800061e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000620:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000624:	684e      	ldr	r6, [r1, #4]
 8000626:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800062a:	d001      	beq.n	8000630 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800062c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000630:	4c45      	ldr	r4, [pc, #276]	@ (8000748 <HAL_GPIO_Init+0x1d4>)
 8000632:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000634:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000636:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000638:	684d      	ldr	r5, [r1, #4]
 800063a:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 800063e:	d001      	beq.n	8000644 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000640:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000644:	4c40      	ldr	r4, [pc, #256]	@ (8000748 <HAL_GPIO_Init+0x1d4>)
 8000646:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000648:	3301      	adds	r3, #1
 800064a:	2b0f      	cmp	r3, #15
 800064c:	d877      	bhi.n	800073e <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 800064e:	2201      	movs	r2, #1
 8000650:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000652:	680c      	ldr	r4, [r1, #0]
 8000654:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000658:	ea32 0404 	bics.w	r4, r2, r4
 800065c:	d1f4      	bne.n	8000648 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800065e:	684c      	ldr	r4, [r1, #4]
 8000660:	f004 0403 	and.w	r4, r4, #3
 8000664:	3c01      	subs	r4, #1
 8000666:	2c01      	cmp	r4, #1
 8000668:	d98b      	bls.n	8000582 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800066a:	684a      	ldr	r2, [r1, #4]
 800066c:	f002 0203 	and.w	r2, r2, #3
 8000670:	2a03      	cmp	r2, #3
 8000672:	d009      	beq.n	8000688 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000674:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000676:	005d      	lsls	r5, r3, #1
 8000678:	2203      	movs	r2, #3
 800067a:	40aa      	lsls	r2, r5
 800067c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000680:	688a      	ldr	r2, [r1, #8]
 8000682:	40aa      	lsls	r2, r5
 8000684:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000686:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000688:	684a      	ldr	r2, [r1, #4]
 800068a:	f002 0203 	and.w	r2, r2, #3
 800068e:	2a02      	cmp	r2, #2
 8000690:	d08e      	beq.n	80005b0 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000692:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000694:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000698:	2203      	movs	r2, #3
 800069a:	fa02 f20e 	lsl.w	r2, r2, lr
 800069e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006a2:	684a      	ldr	r2, [r1, #4]
 80006a4:	f002 0203 	and.w	r2, r2, #3
 80006a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80006ac:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80006ae:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80006b0:	684a      	ldr	r2, [r1, #4]
 80006b2:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 80006b6:	d0c7      	beq.n	8000648 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b8:	2200      	movs	r2, #0
 80006ba:	9201      	str	r2, [sp, #4]
 80006bc:	4a23      	ldr	r2, [pc, #140]	@ (800074c <HAL_GPIO_Init+0x1d8>)
 80006be:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 80006c0:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80006c4:	6454      	str	r4, [r2, #68]	@ 0x44
 80006c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80006c8:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80006cc:	9201      	str	r2, [sp, #4]
 80006ce:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d0:	089c      	lsrs	r4, r3, #2
 80006d2:	1ca5      	adds	r5, r4, #2
 80006d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000744 <HAL_GPIO_Init+0x1d0>)
 80006d6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006da:	f003 0e03 	and.w	lr, r3, #3
 80006de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80006e2:	220f      	movs	r2, #15
 80006e4:	fa02 f20e 	lsl.w	r2, r2, lr
 80006e8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ec:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <HAL_GPIO_Init+0x1dc>)
 80006ee:	4290      	cmp	r0, r2
 80006f0:	f43f af74 	beq.w	80005dc <HAL_GPIO_Init+0x68>
 80006f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80006f8:	4290      	cmp	r0, r2
 80006fa:	d016      	beq.n	800072a <HAL_GPIO_Init+0x1b6>
 80006fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000700:	4290      	cmp	r0, r2
 8000702:	d014      	beq.n	800072e <HAL_GPIO_Init+0x1ba>
 8000704:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000708:	4290      	cmp	r0, r2
 800070a:	d012      	beq.n	8000732 <HAL_GPIO_Init+0x1be>
 800070c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000710:	4290      	cmp	r0, r2
 8000712:	d010      	beq.n	8000736 <HAL_GPIO_Init+0x1c2>
 8000714:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000718:	4290      	cmp	r0, r2
 800071a:	d00e      	beq.n	800073a <HAL_GPIO_Init+0x1c6>
 800071c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000720:	4290      	cmp	r0, r2
 8000722:	f43f af59 	beq.w	80005d8 <HAL_GPIO_Init+0x64>
 8000726:	2207      	movs	r2, #7
 8000728:	e759      	b.n	80005de <HAL_GPIO_Init+0x6a>
 800072a:	2201      	movs	r2, #1
 800072c:	e757      	b.n	80005de <HAL_GPIO_Init+0x6a>
 800072e:	2202      	movs	r2, #2
 8000730:	e755      	b.n	80005de <HAL_GPIO_Init+0x6a>
 8000732:	2203      	movs	r2, #3
 8000734:	e753      	b.n	80005de <HAL_GPIO_Init+0x6a>
 8000736:	2204      	movs	r2, #4
 8000738:	e751      	b.n	80005de <HAL_GPIO_Init+0x6a>
 800073a:	2205      	movs	r2, #5
 800073c:	e74f      	b.n	80005de <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800073e:	b002      	add	sp, #8
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	4770      	bx	lr
 8000744:	40013800 	.word	0x40013800
 8000748:	40013c00 	.word	0x40013c00
 800074c:	40023800 	.word	0x40023800
 8000750:	40020000 	.word	0x40020000

08000754 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000754:	6903      	ldr	r3, [r0, #16]
 8000756:	4219      	tst	r1, r3
 8000758:	d001      	beq.n	800075e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800075a:	2001      	movs	r0, #1
 800075c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800075e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000760:	4770      	bx	lr

08000762 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000762:	b10a      	cbz	r2, 8000768 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000764:	6181      	str	r1, [r0, #24]
 8000766:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000768:	0409      	lsls	r1, r1, #16
 800076a:	6181      	str	r1, [r0, #24]
  }
}
 800076c:	4770      	bx	lr
	...

08000770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000770:	b500      	push	{lr}
 8000772:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000774:	2100      	movs	r1, #0
 8000776:	9100      	str	r1, [sp, #0]
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <HAL_MspInit+0x3c>)
 800077a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800077c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000780:	645a      	str	r2, [r3, #68]	@ 0x44
 8000782:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000784:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8000788:	9200      	str	r2, [sp, #0]
 800078a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	9101      	str	r1, [sp, #4]
 800078e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000790:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a0:	2007      	movs	r0, #7
 80007a2:	f7ff feb1 	bl	8000508 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	b003      	add	sp, #12
 80007a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b0:	b500      	push	{lr}
 80007b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	2300      	movs	r3, #0
 80007b6:	9303      	str	r3, [sp, #12]
 80007b8:	9304      	str	r3, [sp, #16]
 80007ba:	9305      	str	r3, [sp, #20]
 80007bc:	9306      	str	r3, [sp, #24]
 80007be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 80007c0:	6802      	ldr	r2, [r0, #0]
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <HAL_UART_MspInit+0x68>)
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d002      	beq.n	80007ce <HAL_UART_MspInit+0x1e>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007c8:	b009      	add	sp, #36	@ 0x24
 80007ca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80007ce:	2100      	movs	r1, #0
 80007d0:	9101      	str	r1, [sp, #4]
 80007d2:	f503 33fa 	add.w	r3, r3, #128000	@ 0x1f400
 80007d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007d8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80007dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80007de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e0:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80007e4:	9201      	str	r2, [sp, #4]
 80007e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	9102      	str	r1, [sp, #8]
 80007ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80007ec:	f042 0201 	orr.w	r2, r2, #1
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80007f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007fc:	230c      	movs	r3, #12
 80007fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000808:	2307      	movs	r3, #7
 800080a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	a903      	add	r1, sp, #12
 800080e:	4803      	ldr	r0, [pc, #12]	@ (800081c <HAL_UART_MspInit+0x6c>)
 8000810:	f7ff feb0 	bl	8000574 <HAL_GPIO_Init>
}
 8000814:	e7d8      	b.n	80007c8 <HAL_UART_MspInit+0x18>
 8000816:	bf00      	nop
 8000818:	40004400 	.word	0x40004400
 800081c:	40020000 	.word	0x40020000

08000820 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000820:	2800      	cmp	r0, #0
 8000822:	f000 809b 	beq.w	800095c <HAL_RCC_ClockConfig+0x13c>
{
 8000826:	b570      	push	{r4, r5, r6, lr}
 8000828:	460d      	mov	r5, r1
 800082a:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800082c:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <HAL_RCC_ClockConfig+0x14c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f003 030f 	and.w	r3, r3, #15
 8000834:	428b      	cmp	r3, r1
 8000836:	d208      	bcs.n	800084a <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000838:	b2cb      	uxtb	r3, r1
 800083a:	4a4c      	ldr	r2, [pc, #304]	@ (800096c <HAL_RCC_ClockConfig+0x14c>)
 800083c:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800083e:	6813      	ldr	r3, [r2, #0]
 8000840:	f003 030f 	and.w	r3, r3, #15
 8000844:	428b      	cmp	r3, r1
 8000846:	f040 808b 	bne.w	8000960 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800084a:	6823      	ldr	r3, [r4, #0]
 800084c:	f013 0f02 	tst.w	r3, #2
 8000850:	d017      	beq.n	8000882 <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000852:	f013 0f04 	tst.w	r3, #4
 8000856:	d004      	beq.n	8000862 <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000858:	4a45      	ldr	r2, [pc, #276]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 800085a:	6893      	ldr	r3, [r2, #8]
 800085c:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000860:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000862:	6823      	ldr	r3, [r4, #0]
 8000864:	f013 0f08 	tst.w	r3, #8
 8000868:	d004      	beq.n	8000874 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800086a:	4a41      	ldr	r2, [pc, #260]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 800086c:	6893      	ldr	r3, [r2, #8]
 800086e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000874:	4a3e      	ldr	r2, [pc, #248]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 8000876:	6893      	ldr	r3, [r2, #8]
 8000878:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800087c:	68a1      	ldr	r1, [r4, #8]
 800087e:	430b      	orrs	r3, r1
 8000880:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000882:	6823      	ldr	r3, [r4, #0]
 8000884:	f013 0f01 	tst.w	r3, #1
 8000888:	d032      	beq.n	80008f0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800088a:	6863      	ldr	r3, [r4, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d021      	beq.n	80008d4 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000890:	1e9a      	subs	r2, r3, #2
 8000892:	2a01      	cmp	r2, #1
 8000894:	d925      	bls.n	80008e2 <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000896:	4a36      	ldr	r2, [pc, #216]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 8000898:	6812      	ldr	r2, [r2, #0]
 800089a:	f012 0f02 	tst.w	r2, #2
 800089e:	d061      	beq.n	8000964 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008a0:	4933      	ldr	r1, [pc, #204]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 80008a2:	688a      	ldr	r2, [r1, #8]
 80008a4:	f022 0203 	bic.w	r2, r2, #3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80008ac:	f7ff fdf2 	bl	8000494 <HAL_GetTick>
 80008b0:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80008b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	f003 030c 	and.w	r3, r3, #12
 80008ba:	6862      	ldr	r2, [r4, #4]
 80008bc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80008c0:	d016      	beq.n	80008f0 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c2:	f7ff fde7 	bl	8000494 <HAL_GetTick>
 80008c6:	1b80      	subs	r0, r0, r6
 80008c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80008cc:	4298      	cmp	r0, r3
 80008ce:	d9f0      	bls.n	80008b2 <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 80008d0:	2003      	movs	r0, #3
 80008d2:	e042      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d4:	4a26      	ldr	r2, [pc, #152]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 80008d6:	6812      	ldr	r2, [r2, #0]
 80008d8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80008dc:	d1e0      	bne.n	80008a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
 80008e0:	e03b      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008e2:	4a23      	ldr	r2, [pc, #140]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80008ea:	d1d9      	bne.n	80008a0 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80008ec:	2001      	movs	r0, #1
 80008ee:	e034      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <HAL_RCC_ClockConfig+0x14c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	42ab      	cmp	r3, r5
 80008fa:	d907      	bls.n	800090c <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008fc:	b2ea      	uxtb	r2, r5
 80008fe:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <HAL_RCC_ClockConfig+0x14c>)
 8000900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	42ab      	cmp	r3, r5
 800090a:	d12d      	bne.n	8000968 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	f013 0f04 	tst.w	r3, #4
 8000912:	d006      	beq.n	8000922 <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000914:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 8000916:	6893      	ldr	r3, [r2, #8]
 8000918:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800091c:	68e1      	ldr	r1, [r4, #12]
 800091e:	430b      	orrs	r3, r1
 8000920:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	f013 0f08 	tst.w	r3, #8
 8000928:	d007      	beq.n	800093a <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800092a:	4a11      	ldr	r2, [pc, #68]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 800092c:	6893      	ldr	r3, [r2, #8]
 800092e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8000932:	6921      	ldr	r1, [r4, #16]
 8000934:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000938:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800093a:	f000 f847 	bl	80009cc <HAL_RCC_GetSysClockFreq>
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_RCC_ClockConfig+0x150>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000946:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <HAL_RCC_ClockConfig+0x154>)
 8000948:	5cd3      	ldrb	r3, [r2, r3]
 800094a:	40d8      	lsrs	r0, r3
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <HAL_RCC_ClockConfig+0x158>)
 800094e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <HAL_RCC_ClockConfig+0x15c>)
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f7ff fd52 	bl	80003fc <HAL_InitTick>

  return HAL_OK;
 8000958:	2000      	movs	r0, #0
}
 800095a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
}
 800095e:	4770      	bx	lr
      return HAL_ERROR;
 8000960:	2001      	movs	r0, #1
 8000962:	e7fa      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000964:	2001      	movs	r0, #1
 8000966:	e7f8      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000968:	2001      	movs	r0, #1
 800096a:	e7f6      	b.n	800095a <HAL_RCC_ClockConfig+0x13a>
 800096c:	40023c00 	.word	0x40023c00
 8000970:	40023800 	.word	0x40023800
 8000974:	080014c4 	.word	0x080014c4
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000980:	4b01      	ldr	r3, [pc, #4]	@ (8000988 <HAL_RCC_GetHCLKFreq+0x8>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	20000008 	.word	0x20000008

0800098c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800098c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800098e:	f7ff fff7 	bl	8000980 <HAL_RCC_GetHCLKFreq>
 8000992:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800099a:	4a03      	ldr	r2, [pc, #12]	@ (80009a8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
}
 800099e:	40d8      	lsrs	r0, r3
 80009a0:	bd08      	pop	{r3, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	080014bc 	.word	0x080014bc

080009ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80009ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80009ae:	f7ff ffe7 	bl	8000980 <HAL_RCC_GetHCLKFreq>
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80009ba:	4a03      	ldr	r2, [pc, #12]	@ (80009c8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
}
 80009be:	40d8      	lsrs	r0, r3
 80009c0:	bd08      	pop	{r3, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	080014bc 	.word	0x080014bc

080009cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009cc:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009ce:	4b60      	ldr	r3, [pc, #384]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 030c 	and.w	r3, r3, #12
 80009d6:	2b08      	cmp	r3, #8
 80009d8:	d006      	beq.n	80009e8 <HAL_RCC_GetSysClockFreq+0x1c>
 80009da:	2b0c      	cmp	r3, #12
 80009dc:	d05e      	beq.n	8000a9c <HAL_RCC_GetSysClockFreq+0xd0>
 80009de:	2b04      	cmp	r3, #4
 80009e0:	f040 80b4 	bne.w	8000b4c <HAL_RCC_GetSysClockFreq+0x180>
      sysclockfreq = HSI_VALUE;
      break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80009e4:	485b      	ldr	r0, [pc, #364]	@ (8000b54 <HAL_RCC_GetSysClockFreq+0x188>)
 80009e6:	e033      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009e8:	4b59      	ldr	r3, [pc, #356]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 80009ea:	685a      	ldr	r2, [r3, #4]
 80009ec:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80009f6:	d02c      	beq.n	8000a52 <HAL_RCC_GetSysClockFreq+0x86>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009f8:	4b55      	ldr	r3, [pc, #340]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 80009fa:	6858      	ldr	r0, [r3, #4]
 80009fc:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000a00:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000a04:	ebbc 0c00 	subs.w	ip, ip, r0
 8000a08:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000a0c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000a10:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000a14:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000a18:	ebb1 010c 	subs.w	r1, r1, ip
 8000a1c:	eb63 030e 	sbc.w	r3, r3, lr
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000a26:	00c9      	lsls	r1, r1, #3
 8000a28:	eb11 0c00 	adds.w	ip, r1, r0
 8000a2c:	f143 0300 	adc.w	r3, r3, #0
 8000a30:	0259      	lsls	r1, r3, #9
 8000a32:	2300      	movs	r3, #0
 8000a34:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8000a38:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8000a3c:	f7ff fbc2 	bl	80001c4 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000a40:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000a48:	3301      	adds	r3, #1
 8000a4a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8000a4c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a50:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a52:	4b3f      	ldr	r3, [pc, #252]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000a54:	6858      	ldr	r0, [r3, #4]
 8000a56:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000a5a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000a5e:	ebbc 0c00 	subs.w	ip, ip, r0
 8000a62:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000a66:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000a6a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000a6e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000a72:	ebb1 010c 	subs.w	r1, r1, ip
 8000a76:	eb63 030e 	sbc.w	r3, r3, lr
 8000a7a:	00db      	lsls	r3, r3, #3
 8000a7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000a80:	00c9      	lsls	r1, r1, #3
 8000a82:	eb11 0c00 	adds.w	ip, r1, r0
 8000a86:	f143 0300 	adc.w	r3, r3, #0
 8000a8a:	0299      	lsls	r1, r3, #10
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000a92:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000a96:	f7ff fb95 	bl	80001c4 <__aeabi_uldivmod>
 8000a9a:	e7d1      	b.n	8000a40 <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000aaa:	d02a      	beq.n	8000b02 <HAL_RCC_GetSysClockFreq+0x136>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aac:	4b28      	ldr	r3, [pc, #160]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000aae:	6858      	ldr	r0, [r3, #4]
 8000ab0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000ab4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000ab8:	ebbc 0c00 	subs.w	ip, ip, r0
 8000abc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000ac0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000ac4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000ac8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000acc:	ebb1 010c 	subs.w	r1, r1, ip
 8000ad0:	eb63 030e 	sbc.w	r3, r3, lr
 8000ad4:	00db      	lsls	r3, r3, #3
 8000ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000ada:	00c9      	lsls	r1, r1, #3
 8000adc:	eb11 0c00 	adds.w	ip, r1, r0
 8000ae0:	f143 0300 	adc.w	r3, r3, #0
 8000ae4:	0259      	lsls	r1, r3, #9
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8000aec:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8000af0:	f7ff fb68 	bl	80001c4 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000af4:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8000afc:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b00:	e7a6      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8000b04:	6858      	ldr	r0, [r3, #4]
 8000b06:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000b0a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000b0e:	ebbc 0c00 	subs.w	ip, ip, r0
 8000b12:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000b16:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000b1a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000b1e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000b22:	ebb1 010c 	subs.w	r1, r1, ip
 8000b26:	eb63 030e 	sbc.w	r3, r3, lr
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000b30:	00c9      	lsls	r1, r1, #3
 8000b32:	eb11 0c00 	adds.w	ip, r1, r0
 8000b36:	f143 0300 	adc.w	r3, r3, #0
 8000b3a:	0299      	lsls	r1, r3, #10
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000b42:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000b46:	f7ff fb3d 	bl	80001c4 <__aeabi_uldivmod>
 8000b4a:	e7d3      	b.n	8000af4 <HAL_RCC_GetSysClockFreq+0x128>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b4c:	4802      	ldr	r0, [pc, #8]	@ (8000b58 <HAL_RCC_GetSysClockFreq+0x18c>)
  return sysclockfreq;
 8000b4e:	e77f      	b.n	8000a50 <HAL_RCC_GetSysClockFreq+0x84>
 8000b50:	40023800 	.word	0x40023800
 8000b54:	007a1200 	.word	0x007a1200
 8000b58:	00f42400 	.word	0x00f42400

08000b5c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	f000 8201 	beq.w	8000f64 <HAL_RCC_OscConfig+0x408>
{
 8000b62:	b570      	push	{r4, r5, r6, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b68:	6803      	ldr	r3, [r0, #0]
 8000b6a:	f013 0f01 	tst.w	r3, #1
 8000b6e:	d041      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000b70:	4b99      	ldr	r3, [pc, #612]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f003 030c 	and.w	r3, r3, #12
 8000b78:	2b04      	cmp	r3, #4
 8000b7a:	d032      	beq.n	8000be2 <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000b7c:	4b96      	ldr	r3, [pc, #600]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	f003 030c 	and.w	r3, r3, #12
        || \
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d027      	beq.n	8000bd8 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b88:	4b93      	ldr	r3, [pc, #588]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000b90:	2b0c      	cmp	r3, #12
 8000b92:	d059      	beq.n	8000c48 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b94:	6863      	ldr	r3, [r4, #4]
 8000b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b9a:	d05b      	beq.n	8000c54 <HAL_RCC_OscConfig+0xf8>
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ba0:	d05e      	beq.n	8000c60 <HAL_RCC_OscConfig+0x104>
 8000ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000bb2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bb4:	6863      	ldr	r3, [r4, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d05c      	beq.n	8000c74 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bba:	f7ff fc6b 	bl	8000494 <HAL_GetTick>
 8000bbe:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc0:	4b85      	ldr	r3, [pc, #532]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000bc8:	d114      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bca:	f7ff fc63 	bl	8000494 <HAL_GetTick>
 8000bce:	1b40      	subs	r0, r0, r5
 8000bd0:	2864      	cmp	r0, #100	@ 0x64
 8000bd2:	d9f5      	bls.n	8000bc0 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	e1cc      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000bd8:	4b7f      	ldr	r3, [pc, #508]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000be0:	d0d2      	beq.n	8000b88 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be2:	4b7d      	ldr	r3, [pc, #500]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000bea:	d003      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bec:	6863      	ldr	r3, [r4, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 81ba 	beq.w	8000f68 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	f013 0f02 	tst.w	r3, #2
 8000bfa:	d060      	beq.n	8000cbe <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000bfc:	4b76      	ldr	r3, [pc, #472]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f013 0f0c 	tst.w	r3, #12
 8000c04:	d04a      	beq.n	8000c9c <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000c06:	4b74      	ldr	r3, [pc, #464]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d03f      	beq.n	8000c92 <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c12:	4b71      	ldr	r3, [pc, #452]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000c1a:	2b0c      	cmp	r3, #12
 8000c1c:	d069      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000c1e:	68e3      	ldr	r3, [r4, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d075      	beq.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c24:	4b6d      	ldr	r3, [pc, #436]	@ (8000ddc <HAL_RCC_OscConfig+0x280>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2a:	f7ff fc33 	bl	8000494 <HAL_GetTick>
 8000c2e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c30:	4b69      	ldr	r3, [pc, #420]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f013 0f02 	tst.w	r3, #2
 8000c38:	d161      	bne.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c3a:	f7ff fc2b 	bl	8000494 <HAL_GetTick>
 8000c3e:	1b40      	subs	r0, r0, r5
 8000c40:	2802      	cmp	r0, #2
 8000c42:	d9f5      	bls.n	8000c30 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8000c44:	2003      	movs	r0, #3
 8000c46:	e194      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c48:	4b63      	ldr	r3, [pc, #396]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000c50:	d0a0      	beq.n	8000b94 <HAL_RCC_OscConfig+0x38>
 8000c52:	e7c6      	b.n	8000be2 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	4a60      	ldr	r2, [pc, #384]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c56:	6813      	ldr	r3, [r2, #0]
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e7a9      	b.n	8000bb4 <HAL_RCC_OscConfig+0x58>
 8000c60:	4b5d      	ldr	r3, [pc, #372]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	e79f      	b.n	8000bb4 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8000c74:	f7ff fc0e 	bl	8000494 <HAL_GetTick>
 8000c78:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b57      	ldr	r3, [pc, #348]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000c82:	d0b7      	beq.n	8000bf4 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fc06 	bl	8000494 <HAL_GetTick>
 8000c88:	1b40      	subs	r0, r0, r5
 8000c8a:	2864      	cmp	r0, #100	@ 0x64
 8000c8c:	d9f5      	bls.n	8000c7a <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000c8e:	2003      	movs	r0, #3
 8000c90:	e16f      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000c92:	4b51      	ldr	r3, [pc, #324]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000c9a:	d1ba      	bne.n	8000c12 <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9c:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f013 0f02 	tst.w	r3, #2
 8000ca4:	d003      	beq.n	8000cae <HAL_RCC_OscConfig+0x152>
 8000ca6:	68e3      	ldr	r3, [r4, #12]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	f040 815f 	bne.w	8000f6c <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cae:	4a4a      	ldr	r2, [pc, #296]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000cb0:	6813      	ldr	r3, [r2, #0]
 8000cb2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000cb6:	6921      	ldr	r1, [r4, #16]
 8000cb8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cbc:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cbe:	6823      	ldr	r3, [r4, #0]
 8000cc0:	f013 0f08 	tst.w	r3, #8
 8000cc4:	d049      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000cc6:	6963      	ldr	r3, [r4, #20]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d033      	beq.n	8000d34 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ccc:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <HAL_RCC_OscConfig+0x280>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd4:	f7ff fbde 	bl	8000494 <HAL_GetTick>
 8000cd8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cda:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000cde:	f013 0f02 	tst.w	r3, #2
 8000ce2:	d13a      	bne.n	8000d5a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fbd6 	bl	8000494 <HAL_GetTick>
 8000ce8:	1b40      	subs	r0, r0, r5
 8000cea:	2802      	cmp	r0, #2
 8000cec:	d9f5      	bls.n	8000cda <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8000cee:	2003      	movs	r0, #3
 8000cf0:	e13f      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cf2:	4b39      	ldr	r3, [pc, #228]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8000cfa:	d190      	bne.n	8000c1e <HAL_RCC_OscConfig+0xc2>
 8000cfc:	e7ce      	b.n	8000c9c <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cfe:	4a36      	ldr	r2, [pc, #216]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d00:	6813      	ldr	r3, [r2, #0]
 8000d02:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000d06:	6921      	ldr	r1, [r4, #16]
 8000d08:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e7d6      	b.n	8000cbe <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <HAL_RCC_OscConfig+0x280>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d16:	f7ff fbbd 	bl	8000494 <HAL_GetTick>
 8000d1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f013 0f02 	tst.w	r3, #2
 8000d24:	d0cb      	beq.n	8000cbe <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d26:	f7ff fbb5 	bl	8000494 <HAL_GetTick>
 8000d2a:	1b40      	subs	r0, r0, r5
 8000d2c:	2802      	cmp	r0, #2
 8000d2e:	d9f5      	bls.n	8000d1c <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8000d30:	2003      	movs	r0, #3
 8000d32:	e11e      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <HAL_RCC_OscConfig+0x280>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d3c:	f7ff fbaa 	bl	8000494 <HAL_GetTick>
 8000d40:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d42:	4b25      	ldr	r3, [pc, #148]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d46:	f013 0f02 	tst.w	r3, #2
 8000d4a:	d006      	beq.n	8000d5a <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d4c:	f7ff fba2 	bl	8000494 <HAL_GetTick>
 8000d50:	1b40      	subs	r0, r0, r5
 8000d52:	2802      	cmp	r0, #2
 8000d54:	d9f5      	bls.n	8000d42 <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8000d56:	2003      	movs	r0, #3
 8000d58:	e10b      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f013 0f04 	tst.w	r3, #4
 8000d60:	d076      	beq.n	8000e50 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000d6a:	d133      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	9301      	str	r3, [sp, #4]
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d74:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d84:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d86:	4b16      	ldr	r3, [pc, #88]	@ (8000de0 <HAL_RCC_OscConfig+0x284>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000d8e:	d029      	beq.n	8000de4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d90:	68a3      	ldr	r3, [r4, #8]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d03a      	beq.n	8000e0c <HAL_RCC_OscConfig+0x2b0>
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d03e      	beq.n	8000e18 <HAL_RCC_OscConfig+0x2bc>
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000d9c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000da4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000da6:	f022 0204 	bic.w	r2, r2, #4
 8000daa:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000dac:	68a3      	ldr	r3, [r4, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d03c      	beq.n	8000e2c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db2:	f7ff fb6f 	bl	8000494 <HAL_GetTick>
 8000db6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_RCC_OscConfig+0x27c>)
 8000dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000dbc:	f013 0f02 	tst.w	r3, #2
 8000dc0:	d145      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dc2:	f7ff fb67 	bl	8000494 <HAL_GetTick>
 8000dc6:	1b80      	subs	r0, r0, r6
 8000dc8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	d9f3      	bls.n	8000db8 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e0ce      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8000dd4:	2500      	movs	r5, #0
 8000dd6:	e7d6      	b.n	8000d86 <HAL_RCC_OscConfig+0x22a>
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	42470000 	.word	0x42470000
 8000de0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000de4:	4a6b      	ldr	r2, [pc, #428]	@ (8000f94 <HAL_RCC_OscConfig+0x438>)
 8000de6:	6813      	ldr	r3, [r2, #0]
 8000de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000dee:	f7ff fb51 	bl	8000494 <HAL_GetTick>
 8000df2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df4:	4b67      	ldr	r3, [pc, #412]	@ (8000f94 <HAL_RCC_OscConfig+0x438>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000dfc:	d1c8      	bne.n	8000d90 <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dfe:	f7ff fb49 	bl	8000494 <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d9f5      	bls.n	8000df4 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8000e08:	2003      	movs	r0, #3
 8000e0a:	e0b2      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e0c:	4a62      	ldr	r2, [pc, #392]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e0e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e16:	e7c9      	b.n	8000dac <HAL_RCC_OscConfig+0x250>
 8000e18:	4b5f      	ldr	r3, [pc, #380]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e1c:	f042 0204 	orr.w	r2, r2, #4
 8000e20:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8000e24:	f042 0201 	orr.w	r2, r2, #1
 8000e28:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e2a:	e7bf      	b.n	8000dac <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fb32 	bl	8000494 <HAL_GetTick>
 8000e30:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e32:	4b59      	ldr	r3, [pc, #356]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e36:	f013 0f02 	tst.w	r3, #2
 8000e3a:	d008      	beq.n	8000e4e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e3c:	f7ff fb2a 	bl	8000494 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d9f3      	bls.n	8000e32 <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e091      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000e4e:	b9ed      	cbnz	r5, 8000e8c <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e50:	69a3      	ldr	r3, [r4, #24]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 808c 	beq.w	8000f70 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e58:	4a4f      	ldr	r2, [pc, #316]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e5a:	6892      	ldr	r2, [r2, #8]
 8000e5c:	f002 020c 	and.w	r2, r2, #12
 8000e60:	2a08      	cmp	r2, #8
 8000e62:	d054      	beq.n	8000f0e <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d017      	beq.n	8000e98 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e68:	4b4c      	ldr	r3, [pc, #304]	@ (8000f9c <HAL_RCC_OscConfig+0x440>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e6e:	f7ff fb11 	bl	8000494 <HAL_GetTick>
 8000e72:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e74:	4b48      	ldr	r3, [pc, #288]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000e7c:	d045      	beq.n	8000f0a <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7e:	f7ff fb09 	bl	8000494 <HAL_GetTick>
 8000e82:	1b00      	subs	r0, r0, r4
 8000e84:	2802      	cmp	r0, #2
 8000e86:	d9f5      	bls.n	8000e74 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8000e88:	2003      	movs	r0, #3
 8000e8a:	e072      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e8c:	4a42      	ldr	r2, [pc, #264]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000e8e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8000e90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e96:	e7db      	b.n	8000e50 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8000e98:	4b40      	ldr	r3, [pc, #256]	@ (8000f9c <HAL_RCC_OscConfig+0x440>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000e9e:	f7ff faf9 	bl	8000494 <HAL_GetTick>
 8000ea2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000eac:	d006      	beq.n	8000ebc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eae:	f7ff faf1 	bl	8000494 <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f5      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8000eb8:	2003      	movs	r0, #3
 8000eba:	e05a      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ebc:	69e3      	ldr	r3, [r4, #28]
 8000ebe:	6a22      	ldr	r2, [r4, #32]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8000ec4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ec8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000eca:	0852      	lsrs	r2, r2, #1
 8000ecc:	3a01      	subs	r2, #1
 8000ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ed2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8000ed4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ed8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8000eda:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000ede:	4a2e      	ldr	r2, [pc, #184]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000ee0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8000f9c <HAL_RCC_OscConfig+0x440>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fad4 	bl	8000494 <HAL_GetTick>
 8000eec:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eee:	4b2a      	ldr	r3, [pc, #168]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ef8:	f7ff facc 	bl	8000494 <HAL_GetTick>
 8000efc:	1b00      	subs	r0, r0, r4
 8000efe:	2802      	cmp	r0, #2
 8000f00:	d9f5      	bls.n	8000eee <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 8000f02:	2003      	movs	r0, #3
 8000f04:	e035      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000f06:	2000      	movs	r0, #0
 8000f08:	e033      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	e031      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d031      	beq.n	8000f76 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <HAL_RCC_OscConfig+0x43c>)
 8000f14:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f16:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8000f1a:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f1c:	4291      	cmp	r1, r2
 8000f1e:	d12c      	bne.n	8000f7a <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f20:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8000f24:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d129      	bne.n	8000f7e <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f2a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f2c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8000f30:	401a      	ands	r2, r3
 8000f32:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000f36:	d124      	bne.n	8000f82 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f38:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8000f3c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8000f3e:	0852      	lsrs	r2, r2, #1
 8000f40:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f42:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000f46:	d11e      	bne.n	8000f86 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f48:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8000f4c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f4e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8000f52:	d11a      	bne.n	8000f8a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8000f54:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8000f58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f5a:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8000f5e:	d116      	bne.n	8000f8e <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 8000f60:	2000      	movs	r0, #0
 8000f62:	e006      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 8000f64:	2001      	movs	r0, #1
}
 8000f66:	4770      	bx	lr
        return HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
 8000f6a:	e002      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 8000f70:	2000      	movs	r0, #0
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000f76:	2001      	movs	r0, #1
 8000f78:	e7fb      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	e7f9      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f7e:	2001      	movs	r0, #1
 8000f80:	e7f7      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f82:	2001      	movs	r0, #1
 8000f84:	e7f5      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f86:	2001      	movs	r0, #1
 8000f88:	e7f3      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	e7f1      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e7ef      	b.n	8000f72 <HAL_RCC_OscConfig+0x416>
 8000f92:	bf00      	nop
 8000f94:	40007000 	.word	0x40007000
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	42470000 	.word	0x42470000

08000fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fa0:	b510      	push	{r4, lr}
 8000fa2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fa4:	6802      	ldr	r2, [r0, #0]
 8000fa6:	6913      	ldr	r3, [r2, #16]
 8000fa8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000fac:	68c1      	ldr	r1, [r0, #12]
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000fb2:	6883      	ldr	r3, [r0, #8]
 8000fb4:	6902      	ldr	r2, [r0, #16]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	6943      	ldr	r3, [r0, #20]
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	69c3      	ldr	r3, [r0, #28]
 8000fbe:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8000fc0:	6801      	ldr	r1, [r0, #0]
 8000fc2:	68cb      	ldr	r3, [r1, #12]
 8000fc4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8000fc8:	f023 030c 	bic.w	r3, r3, #12
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000fd0:	6802      	ldr	r2, [r0, #0]
 8000fd2:	6953      	ldr	r3, [r2, #20]
 8000fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fd8:	6981      	ldr	r1, [r0, #24]
 8000fda:	430b      	orrs	r3, r1
 8000fdc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000fde:	6803      	ldr	r3, [r0, #0]
 8000fe0:	4a31      	ldr	r2, [pc, #196]	@ (80010a8 <UART_SetConfig+0x108>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d006      	beq.n	8000ff4 <UART_SetConfig+0x54>
 8000fe6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d002      	beq.n	8000ff4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8000fee:	f7ff fccd 	bl	800098c <HAL_RCC_GetPCLK1Freq>
 8000ff2:	e001      	b.n	8000ff8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8000ff4:	f7ff fcda 	bl	80009ac <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ff8:	69e3      	ldr	r3, [r4, #28]
 8000ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000ffe:	d029      	beq.n	8001054 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001000:	2100      	movs	r1, #0
 8001002:	1803      	adds	r3, r0, r0
 8001004:	4149      	adcs	r1, r1
 8001006:	181b      	adds	r3, r3, r0
 8001008:	f141 0100 	adc.w	r1, r1, #0
 800100c:	00c9      	lsls	r1, r1, #3
 800100e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	1818      	adds	r0, r3, r0
 8001016:	6863      	ldr	r3, [r4, #4]
 8001018:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800101c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8001020:	f141 0100 	adc.w	r1, r1, #0
 8001024:	f7ff f8ce 	bl	80001c4 <__aeabi_uldivmod>
 8001028:	4a20      	ldr	r2, [pc, #128]	@ (80010ac <UART_SetConfig+0x10c>)
 800102a:	fba2 3100 	umull	r3, r1, r2, r0
 800102e:	0949      	lsrs	r1, r1, #5
 8001030:	2364      	movs	r3, #100	@ 0x64
 8001032:	fb03 0311 	mls	r3, r3, r1, r0
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	3332      	adds	r3, #50	@ 0x32
 800103a:	fba2 2303 	umull	r2, r3, r2, r3
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001044:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	4413      	add	r3, r2
 8001050:	608b      	str	r3, [r1, #8]
  }
}
 8001052:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001054:	2300      	movs	r3, #0
 8001056:	1802      	adds	r2, r0, r0
 8001058:	eb43 0103 	adc.w	r1, r3, r3
 800105c:	1812      	adds	r2, r2, r0
 800105e:	f141 0100 	adc.w	r1, r1, #0
 8001062:	00c9      	lsls	r1, r1, #3
 8001064:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	1810      	adds	r0, r2, r0
 800106c:	f141 0100 	adc.w	r1, r1, #0
 8001070:	6862      	ldr	r2, [r4, #4]
 8001072:	1892      	adds	r2, r2, r2
 8001074:	415b      	adcs	r3, r3
 8001076:	f7ff f8a5 	bl	80001c4 <__aeabi_uldivmod>
 800107a:	4a0c      	ldr	r2, [pc, #48]	@ (80010ac <UART_SetConfig+0x10c>)
 800107c:	fba2 3100 	umull	r3, r1, r2, r0
 8001080:	0949      	lsrs	r1, r1, #5
 8001082:	2364      	movs	r3, #100	@ 0x64
 8001084:	fb03 0311 	mls	r3, r3, r1, r0
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	3332      	adds	r3, #50	@ 0x32
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	095b      	lsrs	r3, r3, #5
 8001092:	005a      	lsls	r2, r3, #1
 8001094:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8001098:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	6821      	ldr	r1, [r4, #0]
 80010a2:	4413      	add	r3, r2
 80010a4:	608b      	str	r3, [r1, #8]
 80010a6:	e7d4      	b.n	8001052 <UART_SetConfig+0xb2>
 80010a8:	40011000 	.word	0x40011000
 80010ac:	51eb851f 	.word	0x51eb851f

080010b0 <HAL_UART_Init>:
  if (huart == NULL)
 80010b0:	b360      	cbz	r0, 800110c <HAL_UART_Init+0x5c>
{
 80010b2:	b510      	push	{r4, lr}
 80010b4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80010b6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80010ba:	b313      	cbz	r3, 8001102 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80010bc:	2324      	movs	r3, #36	@ 0x24
 80010be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80010c2:	6822      	ldr	r2, [r4, #0]
 80010c4:	68d3      	ldr	r3, [r2, #12]
 80010c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80010ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80010cc:	4620      	mov	r0, r4
 80010ce:	f7ff ff67 	bl	8000fa0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010d2:	6822      	ldr	r2, [r4, #0]
 80010d4:	6913      	ldr	r3, [r2, #16]
 80010d6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80010da:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80010dc:	6822      	ldr	r2, [r4, #0]
 80010de:	6953      	ldr	r3, [r2, #20]
 80010e0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80010e4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80010e6:	6822      	ldr	r2, [r4, #0]
 80010e8:	68d3      	ldr	r3, [r2, #12]
 80010ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ee:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010f0:	2000      	movs	r0, #0
 80010f2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80010f4:	2320      	movs	r3, #32
 80010f6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80010fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80010fe:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8001100:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001102:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001106:	f7ff fb53 	bl	80007b0 <HAL_UART_MspInit>
 800110a:	e7d7      	b.n	80010bc <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800110c:	2001      	movs	r0, #1
}
 800110e:	4770      	bx	lr

08001110 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler>

08001112 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler>

08001114 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler>

08001116 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler>

08001118 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler>

0800111a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	4770      	bx	lr

0800111c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f7ff f9ab 	bl	800047c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bd08      	pop	{r3, pc}

08001128 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001128:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <SystemInit+0x10>)
 800112a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800112e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001132:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001140:	f7ff fff2 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116a:	f000 f819 	bl	80011a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff f925 	bl	80003bc <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001174:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001180:	080014e4 	.word	0x080014e4
  ldr r2, =_sbss
 8001184:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001188:	20000074 	.word	0x20000074

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>

0800118e <memset>:
 800118e:	4402      	add	r2, r0
 8001190:	4603      	mov	r3, r0
 8001192:	4293      	cmp	r3, r2
 8001194:	d100      	bne.n	8001198 <memset+0xa>
 8001196:	4770      	bx	lr
 8001198:	f803 1b01 	strb.w	r1, [r3], #1
 800119c:	e7f9      	b.n	8001192 <memset+0x4>
	...

080011a0 <__libc_init_array>:
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4d0d      	ldr	r5, [pc, #52]	@ (80011d8 <__libc_init_array+0x38>)
 80011a4:	4c0d      	ldr	r4, [pc, #52]	@ (80011dc <__libc_init_array+0x3c>)
 80011a6:	1b64      	subs	r4, r4, r5
 80011a8:	10a4      	asrs	r4, r4, #2
 80011aa:	2600      	movs	r6, #0
 80011ac:	42a6      	cmp	r6, r4
 80011ae:	d109      	bne.n	80011c4 <__libc_init_array+0x24>
 80011b0:	4d0b      	ldr	r5, [pc, #44]	@ (80011e0 <__libc_init_array+0x40>)
 80011b2:	4c0c      	ldr	r4, [pc, #48]	@ (80011e4 <__libc_init_array+0x44>)
 80011b4:	f000 f976 	bl	80014a4 <_init>
 80011b8:	1b64      	subs	r4, r4, r5
 80011ba:	10a4      	asrs	r4, r4, #2
 80011bc:	2600      	movs	r6, #0
 80011be:	42a6      	cmp	r6, r4
 80011c0:	d105      	bne.n	80011ce <__libc_init_array+0x2e>
 80011c2:	bd70      	pop	{r4, r5, r6, pc}
 80011c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80011c8:	4798      	blx	r3
 80011ca:	3601      	adds	r6, #1
 80011cc:	e7ee      	b.n	80011ac <__libc_init_array+0xc>
 80011ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80011d2:	4798      	blx	r3
 80011d4:	3601      	adds	r6, #1
 80011d6:	e7f2      	b.n	80011be <__libc_init_array+0x1e>
 80011d8:	080014dc 	.word	0x080014dc
 80011dc:	080014dc 	.word	0x080014dc
 80011e0:	080014dc 	.word	0x080014dc
 80011e4:	080014e0 	.word	0x080014e0

080011e8 <__udivmoddi4>:
 80011e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ec:	9d08      	ldr	r5, [sp, #32]
 80011ee:	460e      	mov	r6, r1
 80011f0:	4604      	mov	r4, r0
 80011f2:	460f      	mov	r7, r1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d14a      	bne.n	800128e <__udivmoddi4+0xa6>
 80011f8:	4694      	mov	ip, r2
 80011fa:	458c      	cmp	ip, r1
 80011fc:	fab2 f282 	clz	r2, r2
 8001200:	d960      	bls.n	80012c4 <__udivmoddi4+0xdc>
 8001202:	b142      	cbz	r2, 8001216 <__udivmoddi4+0x2e>
 8001204:	f1c2 0320 	rsb	r3, r2, #32
 8001208:	4097      	lsls	r7, r2
 800120a:	fa20 f303 	lsr.w	r3, r0, r3
 800120e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001212:	431f      	orrs	r7, r3
 8001214:	4094      	lsls	r4, r2
 8001216:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800121a:	fa1f f68c 	uxth.w	r6, ip
 800121e:	fbb7 f1fe 	udiv	r1, r7, lr
 8001222:	0c23      	lsrs	r3, r4, #16
 8001224:	fb0e 7711 	mls	r7, lr, r1, r7
 8001228:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800122c:	fb01 f006 	mul.w	r0, r1, r6
 8001230:	4298      	cmp	r0, r3
 8001232:	d90a      	bls.n	800124a <__udivmoddi4+0x62>
 8001234:	eb1c 0303 	adds.w	r3, ip, r3
 8001238:	f101 37ff 	add.w	r7, r1, #4294967295
 800123c:	f080 8115 	bcs.w	800146a <__udivmoddi4+0x282>
 8001240:	4298      	cmp	r0, r3
 8001242:	f240 8112 	bls.w	800146a <__udivmoddi4+0x282>
 8001246:	3902      	subs	r1, #2
 8001248:	4463      	add	r3, ip
 800124a:	1a1b      	subs	r3, r3, r0
 800124c:	b2a4      	uxth	r4, r4
 800124e:	fbb3 f0fe 	udiv	r0, r3, lr
 8001252:	fb0e 3310 	mls	r3, lr, r0, r3
 8001256:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800125a:	fb00 f606 	mul.w	r6, r0, r6
 800125e:	42a6      	cmp	r6, r4
 8001260:	d90a      	bls.n	8001278 <__udivmoddi4+0x90>
 8001262:	eb1c 0404 	adds.w	r4, ip, r4
 8001266:	f100 33ff 	add.w	r3, r0, #4294967295
 800126a:	f080 8100 	bcs.w	800146e <__udivmoddi4+0x286>
 800126e:	42a6      	cmp	r6, r4
 8001270:	f240 80fd 	bls.w	800146e <__udivmoddi4+0x286>
 8001274:	4464      	add	r4, ip
 8001276:	3802      	subs	r0, #2
 8001278:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800127c:	1ba4      	subs	r4, r4, r6
 800127e:	2100      	movs	r1, #0
 8001280:	b11d      	cbz	r5, 800128a <__udivmoddi4+0xa2>
 8001282:	40d4      	lsrs	r4, r2
 8001284:	2300      	movs	r3, #0
 8001286:	e9c5 4300 	strd	r4, r3, [r5]
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128e:	428b      	cmp	r3, r1
 8001290:	d905      	bls.n	800129e <__udivmoddi4+0xb6>
 8001292:	b10d      	cbz	r5, 8001298 <__udivmoddi4+0xb0>
 8001294:	e9c5 0100 	strd	r0, r1, [r5]
 8001298:	2100      	movs	r1, #0
 800129a:	4608      	mov	r0, r1
 800129c:	e7f5      	b.n	800128a <__udivmoddi4+0xa2>
 800129e:	fab3 f183 	clz	r1, r3
 80012a2:	2900      	cmp	r1, #0
 80012a4:	d146      	bne.n	8001334 <__udivmoddi4+0x14c>
 80012a6:	42b3      	cmp	r3, r6
 80012a8:	d302      	bcc.n	80012b0 <__udivmoddi4+0xc8>
 80012aa:	4282      	cmp	r2, r0
 80012ac:	f200 80f5 	bhi.w	800149a <__udivmoddi4+0x2b2>
 80012b0:	1a84      	subs	r4, r0, r2
 80012b2:	eb66 0203 	sbc.w	r2, r6, r3
 80012b6:	2001      	movs	r0, #1
 80012b8:	4617      	mov	r7, r2
 80012ba:	2d00      	cmp	r5, #0
 80012bc:	d0e5      	beq.n	800128a <__udivmoddi4+0xa2>
 80012be:	e9c5 4700 	strd	r4, r7, [r5]
 80012c2:	e7e2      	b.n	800128a <__udivmoddi4+0xa2>
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	f040 8093 	bne.w	80013f0 <__udivmoddi4+0x208>
 80012ca:	eba1 030c 	sub.w	r3, r1, ip
 80012ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012d2:	fa1f fe8c 	uxth.w	lr, ip
 80012d6:	2101      	movs	r1, #1
 80012d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80012dc:	fb07 3016 	mls	r0, r7, r6, r3
 80012e0:	0c23      	lsrs	r3, r4, #16
 80012e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80012e6:	fb0e f006 	mul.w	r0, lr, r6
 80012ea:	4298      	cmp	r0, r3
 80012ec:	d908      	bls.n	8001300 <__udivmoddi4+0x118>
 80012ee:	eb1c 0303 	adds.w	r3, ip, r3
 80012f2:	f106 38ff 	add.w	r8, r6, #4294967295
 80012f6:	d202      	bcs.n	80012fe <__udivmoddi4+0x116>
 80012f8:	4298      	cmp	r0, r3
 80012fa:	f200 80d0 	bhi.w	800149e <__udivmoddi4+0x2b6>
 80012fe:	4646      	mov	r6, r8
 8001300:	1a1b      	subs	r3, r3, r0
 8001302:	b2a4      	uxth	r4, r4
 8001304:	fbb3 f0f7 	udiv	r0, r3, r7
 8001308:	fb07 3310 	mls	r3, r7, r0, r3
 800130c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001310:	fb0e fe00 	mul.w	lr, lr, r0
 8001314:	45a6      	cmp	lr, r4
 8001316:	d908      	bls.n	800132a <__udivmoddi4+0x142>
 8001318:	eb1c 0404 	adds.w	r4, ip, r4
 800131c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001320:	d202      	bcs.n	8001328 <__udivmoddi4+0x140>
 8001322:	45a6      	cmp	lr, r4
 8001324:	f200 80b6 	bhi.w	8001494 <__udivmoddi4+0x2ac>
 8001328:	4618      	mov	r0, r3
 800132a:	eba4 040e 	sub.w	r4, r4, lr
 800132e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001332:	e7a5      	b.n	8001280 <__udivmoddi4+0x98>
 8001334:	f1c1 0720 	rsb	r7, r1, #32
 8001338:	408b      	lsls	r3, r1
 800133a:	fa22 fc07 	lsr.w	ip, r2, r7
 800133e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001342:	fa06 fe01 	lsl.w	lr, r6, r1
 8001346:	fa20 f407 	lsr.w	r4, r0, r7
 800134a:	fa26 f307 	lsr.w	r3, r6, r7
 800134e:	ea44 040e 	orr.w	r4, r4, lr
 8001352:	fa00 f801 	lsl.w	r8, r0, r1
 8001356:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800135a:	ea4f 4914 	mov.w	r9, r4, lsr #16
 800135e:	fbb3 fef0 	udiv	lr, r3, r0
 8001362:	fa1f f68c 	uxth.w	r6, ip
 8001366:	fb00 331e 	mls	r3, r0, lr, r3
 800136a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 800136e:	fb0e f906 	mul.w	r9, lr, r6
 8001372:	4599      	cmp	r9, r3
 8001374:	fa02 f201 	lsl.w	r2, r2, r1
 8001378:	d90b      	bls.n	8001392 <__udivmoddi4+0x1aa>
 800137a:	eb1c 0303 	adds.w	r3, ip, r3
 800137e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8001382:	f080 8085 	bcs.w	8001490 <__udivmoddi4+0x2a8>
 8001386:	4599      	cmp	r9, r3
 8001388:	f240 8082 	bls.w	8001490 <__udivmoddi4+0x2a8>
 800138c:	f1ae 0e02 	sub.w	lr, lr, #2
 8001390:	4463      	add	r3, ip
 8001392:	eba3 0909 	sub.w	r9, r3, r9
 8001396:	b2a4      	uxth	r4, r4
 8001398:	fbb9 f3f0 	udiv	r3, r9, r0
 800139c:	fb00 9913 	mls	r9, r0, r3, r9
 80013a0:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 80013a4:	fb03 f606 	mul.w	r6, r3, r6
 80013a8:	42a6      	cmp	r6, r4
 80013aa:	d908      	bls.n	80013be <__udivmoddi4+0x1d6>
 80013ac:	eb1c 0404 	adds.w	r4, ip, r4
 80013b0:	f103 30ff 	add.w	r0, r3, #4294967295
 80013b4:	d268      	bcs.n	8001488 <__udivmoddi4+0x2a0>
 80013b6:	42a6      	cmp	r6, r4
 80013b8:	d966      	bls.n	8001488 <__udivmoddi4+0x2a0>
 80013ba:	3b02      	subs	r3, #2
 80013bc:	4464      	add	r4, ip
 80013be:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80013c2:	1ba4      	subs	r4, r4, r6
 80013c4:	fba0 e602 	umull	lr, r6, r0, r2
 80013c8:	42b4      	cmp	r4, r6
 80013ca:	4673      	mov	r3, lr
 80013cc:	46b1      	mov	r9, r6
 80013ce:	d352      	bcc.n	8001476 <__udivmoddi4+0x28e>
 80013d0:	d04f      	beq.n	8001472 <__udivmoddi4+0x28a>
 80013d2:	b15d      	cbz	r5, 80013ec <__udivmoddi4+0x204>
 80013d4:	ebb8 0203 	subs.w	r2, r8, r3
 80013d8:	eb64 0409 	sbc.w	r4, r4, r9
 80013dc:	fa04 f707 	lsl.w	r7, r4, r7
 80013e0:	fa22 f301 	lsr.w	r3, r2, r1
 80013e4:	431f      	orrs	r7, r3
 80013e6:	40cc      	lsrs	r4, r1
 80013e8:	e9c5 7400 	strd	r7, r4, [r5]
 80013ec:	2100      	movs	r1, #0
 80013ee:	e74c      	b.n	800128a <__udivmoddi4+0xa2>
 80013f0:	f1c2 0120 	rsb	r1, r2, #32
 80013f4:	fa20 f301 	lsr.w	r3, r0, r1
 80013f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80013fc:	fa26 f101 	lsr.w	r1, r6, r1
 8001400:	4096      	lsls	r6, r2
 8001402:	4333      	orrs	r3, r6
 8001404:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001408:	fa1f fe8c 	uxth.w	lr, ip
 800140c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001410:	fb07 1610 	mls	r6, r7, r0, r1
 8001414:	0c19      	lsrs	r1, r3, #16
 8001416:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 800141a:	fb00 f60e 	mul.w	r6, r0, lr
 800141e:	428e      	cmp	r6, r1
 8001420:	fa04 f402 	lsl.w	r4, r4, r2
 8001424:	d908      	bls.n	8001438 <__udivmoddi4+0x250>
 8001426:	eb1c 0101 	adds.w	r1, ip, r1
 800142a:	f100 38ff 	add.w	r8, r0, #4294967295
 800142e:	d22d      	bcs.n	800148c <__udivmoddi4+0x2a4>
 8001430:	428e      	cmp	r6, r1
 8001432:	d92b      	bls.n	800148c <__udivmoddi4+0x2a4>
 8001434:	3802      	subs	r0, #2
 8001436:	4461      	add	r1, ip
 8001438:	1b89      	subs	r1, r1, r6
 800143a:	b29b      	uxth	r3, r3
 800143c:	fbb1 f6f7 	udiv	r6, r1, r7
 8001440:	fb07 1116 	mls	r1, r7, r6, r1
 8001444:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001448:	fb06 f10e 	mul.w	r1, r6, lr
 800144c:	4299      	cmp	r1, r3
 800144e:	d908      	bls.n	8001462 <__udivmoddi4+0x27a>
 8001450:	eb1c 0303 	adds.w	r3, ip, r3
 8001454:	f106 38ff 	add.w	r8, r6, #4294967295
 8001458:	d214      	bcs.n	8001484 <__udivmoddi4+0x29c>
 800145a:	4299      	cmp	r1, r3
 800145c:	d912      	bls.n	8001484 <__udivmoddi4+0x29c>
 800145e:	3e02      	subs	r6, #2
 8001460:	4463      	add	r3, ip
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
 8001468:	e736      	b.n	80012d8 <__udivmoddi4+0xf0>
 800146a:	4639      	mov	r1, r7
 800146c:	e6ed      	b.n	800124a <__udivmoddi4+0x62>
 800146e:	4618      	mov	r0, r3
 8001470:	e702      	b.n	8001278 <__udivmoddi4+0x90>
 8001472:	45f0      	cmp	r8, lr
 8001474:	d2ad      	bcs.n	80013d2 <__udivmoddi4+0x1ea>
 8001476:	ebbe 0302 	subs.w	r3, lr, r2
 800147a:	eb66 060c 	sbc.w	r6, r6, ip
 800147e:	3801      	subs	r0, #1
 8001480:	46b1      	mov	r9, r6
 8001482:	e7a6      	b.n	80013d2 <__udivmoddi4+0x1ea>
 8001484:	4646      	mov	r6, r8
 8001486:	e7ec      	b.n	8001462 <__udivmoddi4+0x27a>
 8001488:	4603      	mov	r3, r0
 800148a:	e798      	b.n	80013be <__udivmoddi4+0x1d6>
 800148c:	4640      	mov	r0, r8
 800148e:	e7d3      	b.n	8001438 <__udivmoddi4+0x250>
 8001490:	46d6      	mov	lr, sl
 8001492:	e77e      	b.n	8001392 <__udivmoddi4+0x1aa>
 8001494:	4464      	add	r4, ip
 8001496:	3802      	subs	r0, #2
 8001498:	e747      	b.n	800132a <__udivmoddi4+0x142>
 800149a:	4608      	mov	r0, r1
 800149c:	e70d      	b.n	80012ba <__udivmoddi4+0xd2>
 800149e:	3e02      	subs	r6, #2
 80014a0:	4463      	add	r3, ip
 80014a2:	e72d      	b.n	8001300 <__udivmoddi4+0x118>

080014a4 <_init>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	bf00      	nop
 80014a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014aa:	bc08      	pop	{r3}
 80014ac:	469e      	mov	lr, r3
 80014ae:	4770      	bx	lr

080014b0 <_fini>:
 80014b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b2:	bf00      	nop
 80014b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014b6:	bc08      	pop	{r3}
 80014b8:	469e      	mov	lr, r3
 80014ba:	4770      	bx	lr
